apply from: "../plugin-normal-app/build.gradle"

android {
    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
    }
}

dependencies {
    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    compileOnly "com.tencent.shadow.core:runtime:$shadow_version"
}

buildscript {
    repositories {
        maven { url "file://${gradle.ext.localMavenDir.absolutePath}" }
        google()
        mavenCentral()
        maven {
            name = "GitHubPackages"
            url "https://maven.pkg.github.com/shifujun/shadow"
            //一个只读账号兼容Github Packages暂时不支持匿名下载
            //https://github.community/t/download-from-github-package-registry-without-authentication/14407
            credentials {
                username = 'readonlypat'
                password = '\u0062\u0036\u0064\u0037\u0035\u0032\u0062\u0061\u0035\u0038\u0063\u0064\u0032\u0061\u0038\u0037\u0064\u0033\u0034\u0033\u0039\u0038\u0035\u0036\u0032\u0034\u0065\u0039\u0031\u0036\u0066\u0065\u0065\u0062\u0031\u0065\u0033\u0037\u0061\u0039'
            }
        }
        mavenLocal()
    }

    dependencies {
        classpath "com.tencent.shadow.core:runtime:$shadow_version"
        classpath "com.tencent.shadow.core:activity-container:$shadow_version"
        classpath "com.tencent.shadow.core:gradle-plugin:$shadow_version"
        classpath 'org.javassist:javassist:3.22.0-GA'
    }
}

def createDuplicateApkTask(buildType) {
    def apkDir = file("${getBuildDir()}/outputs/apk/$buildType")

    return tasks.create("duplicate${buildType.capitalize()}ApkTask", Copy) {
        group = 'build'
        description = "复制一个plugin-shadow-app-${buildType}.apk用于测试目的"
        from(apkDir) {
            include("plugin-shadow-app-${buildType}.apk")
            rename { "plugin-shadow-app-${buildType}2.apk" }
        }
        into(apkDir)

    }.dependsOn(":plugin-shadow-app:assemble${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
        def createTask = createDuplicateApkTask('debug')
        task.finalizedBy(createTask)
    }
    if (task.name == "assembleRelease") {
        def createTask = createDuplicateApkTask('release')
        task.finalizedBy(createTask)
    }
}

apply plugin: 'com.tencent.shadow.plugin'

shadow {
    transform {
//        useHostContext = ['abc']
    }

    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('plugin-loader-debug.apk', ':plugin-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('plugin-runtime-debug.apk', ':plugin-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-shadow-app'
                        partKey = 'plugin-shadow-app'
                        buildTask = ':plugin-shadow-app:assembleDebug'
                        apkName = 'plugin-shadow-app-debug.apk'
                        apkPath = 'plugin-shadow-app/build/outputs/apk/debug/plugin-shadow-app-debug.apk'
                        hostWhiteList = ["com.timecat.plugin.shared"]
                    }
                    pluginApk2 {
                        businessName = 'plugin-shadow-app2'
                        partKey = 'plugin-shadow-app2'
                        buildTask = ':plugin-shadow-app:assembleDebug'
                        apkName = 'plugin-shadow-app-debug2.apk'
                        apkPath = 'plugin-shadow-app/build/outputs/apk/debug/plugin-shadow-app-debug2.apk'
                        hostWhiteList = ["com.timecat.plugin.shared"]
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('plugin-loader-release.apk', ':plugin-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('plugin-runtime-release.apk', ':plugin-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-shadow-app'
                        partKey = 'plugin-shadow-app'
                        buildTask = ':plugin-shadow-app:assembleRelease'
                        apkName = 'plugin-shadow-app-release.apk'
                        apkPath = 'plugin-shadow-app/build/outputs/apk/release/plugin-shadow-app-release.apk'
                        hostWhiteList = ["com.timecat.plugin.shared"]
                    }
                    pluginApk2 {
                        businessName = 'plugin-shadow-app2'
                        partKey = 'plugin-shadow-app2'
                        buildTask = ':plugin-shadow-app:assembleRelease'
                        apkName = 'plugin-shadow-app-release2.apk'
                        apkPath = 'plugin-shadow-app/build/outputs/apk/release/plugin-shadow-app-release2.apk'
                        hostWhiteList = ["com.timecat.plugin.shared"]
                    }
                }
            }
        }

        loaderApkProjectPath = 'plugin-loader'
        runtimeApkProjectPath = 'plugin-runtime'

        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        archivePrefix = 'plugin'
        destinationDir = "${getRootProject().getBuildDir()}"

        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5"
    }
}